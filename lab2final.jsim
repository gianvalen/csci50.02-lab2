* Pilar, Paulo Miguel
* Ramos, Jade Connery
* Valencia, Gian Carlo

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

* Defining subcircuit with function OUT = ABC + DE + FG using NANDs
.subckt fx a b c d e f g out1 out2 out3 final

    * Use NANDs for !(ABC)
    Xsub1 a b c out1 nand3

    * Use NANDs for !(DE)
    Xsub2 d e out2 nand2

    * Use NANDs !(FG)
    Xsub3 f g out3 nand2

    * Use NAND to invert and apply De Morgan's
    Xsub4 out1 out2 out3 final nand3
.ends

* Full-adder subcircuit definition using NANDs
* sum = a XOR b XOR carryin
* carryout = AB + A_carryin + B_carryin
.subckt fa a b carry_in out1 out2 out3 out4 out5 out6 out7 out8 out9 out10 sum carry_out

    * Use NANDs to implement XOR gates for sum
    Xsub1 a b out1 nand2
    Xsub2 a out1 out2 nand2
    Xsub3 b out1 out3 nand2
    Xsub4 out2 out3 out4 nand2

    Xsub5 out4 carry_in out5 nand2
    Xsub6 out4 out5 out6 nand2
    Xsub7 carry_in out5 out7 nand2
    Xsub8 out6 out7 sum nand2

    * Use NANDs for !(AB), !(ACin), and !(BCin)
    Xsub9 a b out8 nand2
    Xsub10 a carry_in out9 nand2
    Xsub11 b carry_in out10 nand2

    * Use NAND to invert and apply De Morgan's
    * out8 = !(AB); out9 = !(ACin); out10 = !(BCin)
    Xsub12 out8 out9 out10 carry_out nand3
.ends

* Instantiate fx
Xcircuit1 clk1 clk2 clk3 clk4 clk5 clk6 clk7 a b c out fx

* Instantiate fa
Xcircuit2 clk5 clk6 clk7 h i j k l m n o p q sum carryout fa

* Plotting    
.tran 640ns
.plot clk1
.plot clk2
.plot clk3
.plot clk4
.plot clk5
.plot clk6
.plot clk7
.plot out
.plot sum
.plot carryout