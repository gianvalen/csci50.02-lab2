* Pilar, Paulo Miguel
* Ramos, Jade Connery
* Valencia, Gian Carlo

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

* Defining a Full Adder (From lab2)
.subckt fa a b carry_in sum carry_out

    * GETTING THE SUM

    * STEP 1: A NAND representation of XOR was obtained from https://www.shiksha.com/online-courses/articles/xor-gate-using-nand-gate/
    * NOTE: This implementation of 2-input XOR gate using NAND gates were cascaded
    *       in order to implement a 3-input XOR gate using NAND gates 

    * STEP 2: Implement the 2-input XOR for A B, based on the said diagram
    Xsub1 a b out1 nand2
    Xsub2 a out1 out2 nand2
    Xsub3 b out1 out3 nand2
    Xsub4 out2 out3 out4 nand2

    * STEP 3: Implement the 2-input XOR for the output of (A XOR B) and C, based on the said diagram
    * This will give output the sum which is equal to A XOR B XOR C
    Xsub5 out4 carry_in out5 nand2
    Xsub6 out4 out5 out6 nand2
    Xsub7 carry_in out5 out7 nand2
    Xsub8 out6 out7 sum nand2

    * GETTING THE CARRYOUT

    * STEP 1: DOUBLE NEGATION -> !!(A B + B C-IN + A C-IN)
    * STEP 2: DISTRIBUTE NEGATION -> !(!(AB) 路 !(B C-IN) 路 !(A C-IN))

    * STEP 3: Use NANDs for !(AB)
    Xsub9 a b out8 nand2

    * STEP 4: Use NANDs for !(ACin)
    Xsub10 a carry_in out9 nand2

    * STEP 5: Use NANDs for !(BCin)
    Xsub11 b carry_in out10 nand2

    * STEP 6 Use NAND to satisfy !(!(AB) 路 !(B C-IN) 路 !(A C-IN))
    Xsub12 out8 out9 out10 carry_out nand3
.ends

* Defining a subcircuit named add32 for a 32-bit ripple carry adder
.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]

* The circuit is made in such a way that the carryout of the previous line (bit) will also serve as the value of the current carryin
    Xbit a[0:31] b[0:31] c_in0 c_out[0:30] sum[0:31] c_out[0:31] fa
.ends

* Instantiating add32
* The parameters a[31:0] and b[31:0] are assigned to the two 32-bit input numbers that to be added
* The c_in0 parameter is initially instantiated to be 0
* The sum[31:0] parameters are assigned to the outputs of the two numbers added, plus the carry
* The c31 and c30 parameters are assigned to the last two carry-out of the result
Xsum a[31:0] b[31:0] 0 sum[31:0] c31 c30 add32

* Testing
* STEP 1: Creating digital waveforms for inputs a and b
* STEP 2: Adding the values of a and b accordingly to the given test cases
Wa a[31:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns)
+ 0x00000000 0x55555555 0x00000000 0x55555555 0xFFFFFFFF 0xAAAAAAAA 0x00000000 0xAAAAAAAA 0x00000001 0xFFFFFFFF 
Wb b[31:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns)
+ 0x00000000 0x00000000 0x55555555 0x55555555 0xFFFFFFFF 0x00000000 0xAAAAAAAA 0xAAAAAAAA 0xFFFFFFFF 0x00000001

* PLOTTING    
.tran 200ns
.plot a[31:0]
.plot b[31:0]
.plot sum[31:0]