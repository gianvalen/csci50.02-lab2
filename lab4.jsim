*******************************************************************************
* Pilar, Paulo Miguel
* Ramos, Jade Connery
* Valencia, Gian Carlo
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

*******************************************************************************
* Plug-in your full adder and 32-bit ripple-carry adder subcircuits here.
*******************************************************************************
.subckt fa a b c sum carry
* GETTING THE SUM

  * STEP 1: A NAND representation of XOR was obtained from https://www.shiksha.com/online-courses/articles/xor-gate-using-nand-gate/
  * NOTE: This implementation of 2-input XOR gate using NAND gates were cascaded
  *       in order to implement a 3-input XOR gate using NAND gates 

  * STEP 2: Implement the 2-input XOR for A B, based on the said diagram
  Xsub1 a b out1 nand2
  Xsub2 a out1 out2 nand2
  Xsub3 b out1 out3 nand2
  Xsub4 out2 out3 out4 nand2

  * STEP 3: Implement the 2-input XOR for the output of (A XOR B) and C, based on the said diagram
  * This will give output the sum which is equal to A XOR B XOR C
  Xsub5 out4 c out5 nand2
  Xsub6 out4 out5 out6 nand2
  Xsub7 c out5 out7 nand2
  Xsub8 out6 out7 sum nand2

  * GETTING THE CARRYOUT

  * STEP 1: DOUBLE NEGATION -> !!(A B + B C-IN + A C-IN)
  * STEP 2: DISTRIBUTE NEGATION -> !(!(AB) 路 !(B C-IN) 路 !(A C-IN))

  * STEP 3: Use NANDs for !(AB)
  Xsub9 a b out8 nand2

  * STEP 4: Use NANDs for !(ACin)
  Xsub10 a c out9 nand2

  * STEP 5: Use NANDs for !(BCin)
  Xsub11 b c out10 nand2

  * STEP 6 Use NAND to satisfy !(!(AB) 路 !(B C-IN) 路 !(A C-IN))
  Xsub12 out8 out9 out10 carry nand3
.ends

.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]

* The circuit is made in such a way that the carryout of the previous line (bit) will also serve as the value of the current carryin
  Xbit a[0:31] b[0:31] c_in0 c_out[0:30] sum[0:31] c_out[0:31] fa
.ends

*******************************************************************************
* Your new counter32 subcircuit code should go here.
*******************************************************************************
.subckt counter32 reset a[31:0] f[31:0] clk

  * Add the value of a[31:0] to f[31:0] through a 32-bit adder
  * Parameter a[31:0] signifies the value being added or subtracted (if negative)
  * Parameter f[31:0] is the current value being kept after going through the d-register
  Xadd a[31:0] f[31:0] 0 sum[31:0] cout[31:30] add32

  * Connect y[31:0] to 0 or ground
  * This will be further discussed in the mux2 section
  .connect 0 y[31:0]

  * When reset = 0, the sum of the 32-bit adder also knwon as sum[31:0] will be the value of mux_output[31:0]
  * When reset = 1, y[31:0] or 0 will be the value of mux_output[31:0]
  * Parameter mux_output[31:0] will be passed to the d-register
  Xmux reset#32 sum[31:0] y[31:0] mux_output[31:0] mux2

  * In a positive edge-triggered register, mux_output[31:0] will be passed to f[31:0] only when clk is doing a rising transition
  Xdreg mux_output[31:0] clk#32 f[31:0] dreg
.ends

*******************************************************************************
* Pitfall: DON'T use numbers AND iterators in your node names at the same time,
*          e.g., temp[31:0] and temp2[31:0] will result in conflicts!
*
* Also, you may need to use these statements when making your own counter32:
*
* .connect node othernode(s)...
*  = connects the first node to all the subsequent nodes
*    - For example, ".connect a b[31:0]" connects a to b31, b30, ..., b0.
*    - You can also connect nodes directly to ground ("false") by saying
*      ".connect 0 othernode(s)..."
*    - You can also connect nodes directly to vdd ("true") by saying
*      ".connect vdd othernode(s)..."
*
* Xid s d0 d1 z mux2
*  = "mux2" defines a 2-way multiplexer circuit.
*    - If s = 0, node z is set to the value of node d0.
*    - If s = 1, node z is set to the value of node d1.
*    - s, d0, d1 and z are SINGLE BITS. As usual, use iterators to create
*      several multiplexers at once.
*    - Note that the reset node of your counter32 is only a single bit
*      (NOT 32 bits), so to use it with multiple multiplexers, use the form
*      "node#n" to make n copies of the node, e.g., "reset#32".
*
* Xid d clk q dreg
*  = "dreg" defines a flip-flop register q (a single bit of "memory") and sets
*    it to the value of another node, d.
*    - Unlike "connect"-ing nodes, the value only gets stored into q when clk
*      is doing a rising transition (also known as a "positive edge trigger").
*    - Hint: You will also need iteration for this since we need a 32-bit
*      register, which means you will also need to make 32 copies of clk.
*******************************************************************************

*******************************************************************************
* Finally, it's time to simulate.
* This circuit block instantiates the counter32 circuit that you just wrote.
* We pass it a single-bit reset signal, a 32-bit increment value, a 32-bit
* register, and a clock signal (we just used the JSim-predefined clk1).
*******************************************************************************
Xcounter32 reset incr[31:0] reg[31:0] clk1 counter32

*******************************************************************************
* This "reset" waveform sets up a reset signal that has a delayed start of 15ns
* and then goes to the next value every 50ns.
* The values "1 0 0 0 1 0" indicate that the reset signal only turns on twice
* (at times 15ns and 215ns) for a period of 50ns intervals each, and the signal
* is turned off otherwise.
*******************************************************************************
Wreset reset nrz(0, 5, 50ns, 15ns, 0.001ns, 0.001ns)
+ 1 0 0 0 1 0

*******************************************************************************
* This "incr" waveform sets up a increment value for your counter32 circuit.
* Note that it does NOT have a delayed start. The values "0 1 3 -1" roughly
* translate to the following "commands" in Java-like syntax:
*   reg += 0;  //  0 means don't touch the value
*   reg++;     //  1 means increment by 1
*   reg += 3;  //  3 means increment by 3
*   reg--;     // -1 means decrement by 1
* But note that these "commands" will happen EVERY positive clock edge (and
* only when your reset signal is off)!
*******************************************************************************
Wincr incr[31:0] nrz(0, 5, 50ns, 0ns, 0.001ns, 0.001ns)
+ 0 1 3 -1

*******************************************************************************
* Plot our reset waveform, our incr waveform, clk1, and your 32-bit register.
* Note: sd() displays a range of nodes as a signed decimal (instead of hex)
*******************************************************************************
.tran 300ns
.plot reset
.plot sd(incr[31:0])
.plot clk1
.plot sd(reg[31:0])
