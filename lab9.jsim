*******************************************************************************
* Pilar, Paulo Miguel
* Ramos, Jade Connery
* Valencia, Gian Carlo
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

*******************************************************************************
* Defining the full adder subcircuit
*******************************************************************************

.subckt fa a b c sum carry
    
    * GETTING THE SUM

    * STEP 1: Implement a 2-input XOR gate for A and B
    Xsub1 a b out1 xor2

    * STEP 2: Implement a 2-input XOR gate for the output of (A XOR B) and C
    * This will give output the sum which is equal to A XOR B XOR C
    Xsub2 out1 c sum xor2

    * GETTING THE CARRYOUT

    * STEP 1: Implement a 2-input AND gate to get (A XOR B)C
    Xsub3 out1 c out2 and2

    * STEP 2: Implement a 2-input AND gate to get AB
    Xsub4 a b out3 and2

    * STEP 2: Implement a 2-input OR gate to get (A XOR B)C + AB which is the carry
    Xsub5 out2 out3 carry or2
.ends

*******************************************************************************
* Defining 32-bit ripple-carry adder subcircuit
*******************************************************************************

.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]

    * The circuit is made in such a way that the carryout of the previous line (bit) will also serve as the value of the current carryin
    * tpd = 0.24 * 32 = 7.68ns (based on quickref)
    Xbit a[0:31] b[0:31] c_in0 c_out[0:30] sum[0:31] c_out[0:31] fa
.ends

*******************************************************************************
* Defining adder/subrtactor subcircuit
*******************************************************************************

.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z

    * If op0 = 0, the value of b[31:0] is kept in b_new[31:0] as the circuit is preparing to use addition
    * If op0 = 1, the value of b_new[31:0] takes in the value of an inverted b[31:0] as preparation for subtraction
    Xinvert b[31:0] op0#32 b_new[31:0] xor2

    * Perform the appropriate operation using the 32-bit adder circuit
    * tpd = 7.68ns (based on quickref)
    * op0 is set as the initial carry-in
    * If op0 = 0, the initial carry-in is 0
    * If op0 = 1, the initial carry-in is 1 signifying the "1" added in two's complement
    Xas a[31:0] b_new[31:0] op0 fas[31:0] c_out[31:30] add32

    * Checking for negative
    * Connect fas31 to n because fas31 (the most significant bit) determines whether the output is positive or negative
    .connect fas31 n

    * Checking for overflow
    * tpd = 0.14ns (based on quickref)
    * If cout31 != cout30, then overflow
    * If cout31 = cout30, then no overflow
    Xoverflow c_out31 c_out30 v xor2

    * Checking for zero
    * tpd = 0.24ns (based on quickref)
    * Using the "Pushing Bubbles" technique, OR gates were implemented using NOR and NAND
    Xnor_start fas[0:7] fas[8:15] fas[16:23] fas[24:31] nor_out[0:7] nor4
    Xnand1 nor_out0 nor_out1 nor_out2 nor_out3 nand_out1 nand4
    Xnand2 nor_out4 nor_out5 nor_out6 nor_out7 nand_out2 nand4
    Xnor_end nand_out1 nand_out2 z nor2
.ends

*******************************************************************************
* Defining comparator subcircuit
*******************************************************************************

.subckt cmp32 n v z op[2:1] fcmp[31:0]
    
    * Connect fcmp[1:31] to ground
    .connect 0 fcmp[1:31]

    * Check if A = B
    * Connect z to a_equal_b
    .connect z a_equal_b

    * Check if A < B
    Xcheck_less v n a_less_b xor2

    * Check if A <= B
    * tpd = 0.15ns (based on quickref)
    Xcheck_both a_equal_b a_less_b a_less_equal_b or2

    * Use a multiplexer to select the appropriate output for fcmp0 based on the requested comparator operation
    * tpd = 0.19ns (based on quickref)
    * If op2 = 0 and op1 = 0, "0" is passed to fcmp0. However, it does not matter as it does not mean anything. ("DONTCARE")
    * If op2 = 1 and op1 = 0, fcmp0 checks if A is less than B
    * If op2 = 0 and op1 = 1, fcmp0 checks if A is equal to B
    * If op2 = 1 and op1 = 1, fcmp0 checks if A is less than or equal to B
    Xmux4 op2 op1 0 a_less_b a_equal_b a_less_equal_b fcmp0 mux4
.ends

*******************************************************************************
* Defining bitwise boolean subcircuit
*******************************************************************************

.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]

    * op[0:3] are the same for all multiplexers
    * If op[3:0] = 1000, the subcircuit is configured to perform a bitwise boolean AND operation.
    * If op[3:0] = 1110, the subcircuit is configured to perform a bitwise boolean OR operation.
    * If op[3:0] = 0110, the subcircuit is configured to perform a bitwise boolean XOR operation.
    * If op[3:0] = 0101, the subcircuit is configured to perform a bitwise boolean NOT A operation.
    Xmux a[31:0] b[31:0] op0#32 op1#32 op2#32 op3#32 fbool[31:0] mux4
.ends

*******************************************************************************
* Defining bit shifter subcircuit
*******************************************************************************

.subckt shift32 a[31:0] b[4:0] op[1:0] fshift[31:0]

    * Determine the sign of the a[31:0] by performing an AND with op1 and a31
    * If op1 = 0, the circuit is perfoming a logical shift, hence the value that will take the place of the shifted bits is automatically 0
    * If op1 = 1, the circuit is perfoming an arithmetic shift, hence the value that will take the place of the shifted bits depends on the sign
    Xcheck_sign op1 a31 sign and2

    * Determine the direction of the shifting, specifying whether it is a right or left shift
    * If op0 = 0, then a left shift will be occuring. a[31:0] is flipped to a[0:31]
    * This flip is necessary because flipping the value allows a right shift to effectively function as a left shift when it is flipped back
    * If op0 = 1, then a right shift will be occuring, and no flipping will happen
    Xdirection op0#32 a[0:31] a[31:0] right_or_left[31:0] mux2
    
    * If b4 = 0, then a shift by 16 bits will not occur
    * If b4 = 1, a shift by 16 bits will be performed, 
    * adding the 'sign' or placeholder obtained earlier 16 times to the beginning to simulate the shift
    * The output from this stage is then cascaded to the next 'shifter' as input
    Xshift_sixteen b4#32 right_or_left[31:0] sign#16 right_or_left[31:16] shift_sixteen[31:0] mux2

    * If b3 = 0, then a shift by 8 bits will not occur
    * If b3 = 1, a shift by 8 bits will be performed, 
    * adding the 'sign' or placeholder obtained earlier 8 times to the beginning to simulate the shift
    * The output from this stage is then cascaded to the next 'shifter' as input
    Xshift_eight b3#32 shift_sixteen[31:0] sign#8 shift_sixteen[31:8] shift_eight[31:0] mux2

    * If b2 = 0, then a shift by 4 bits will not occur
    * If b2 = 1, a shift by 4 bits will be performed, 
    * adding the 'sign' or placeholder obtained earlier 4 times to the beginning to simulate the shift
    * The output from this stage is then cascaded to the next 'shifter' as input
    Xshift_four b2#32 shift_eight[31:0] sign#4 shift_eight[31:4] shift_four[31:0] mux2

    * If b1 = 0, then a shift by 2 bits will not occur
    * If b1 = 1, a shift by 2 bits will be performed, 
    * adding the 'sign' or placeholder obtained earlier 2 times to the beginning to simulate the shift
    * The output from this stage is then cascaded to the next 'shifter' as input
    Xshift_two b1#32 shift_four[31:0] sign#2 shift_four[31:2] shift_two[31:0] mux2

    * If b0 = 0, then a shift by 1 bit will not occur
    * If b0 = 1, a shift by 1 bit will be performed, 
    * adding the 'sign' or placeholder obtained earlier 1 time to the beginning to simulate the shift
    Xshift_one b0#32 shift_two[31:0] sign shift_two[31:1] shift_one[31:0] mux2

    * Determine if the shifted output should be flipped, depending on op0
    * If op0 = 0, then the output will be flipped to overall simulate a left shift
    * If op0 = 1, then the output will not be flipped to overall simulate a right shift
    Xmux op0#32 shift_one[0:31] shift_one[31:0] fshift[31:0] mux2
.ends

*******************************************************************************
* Defining ALU subcircuit
*******************************************************************************
.subckt alu32 a[31:0] b[31:0] alufn[5:0] f[31:0]

    * Instantiate a 32-bit adder/subtractor, producing an output labeled as_output[31:0]
    * alufn0 determines whether an addition or subtraction is performed
    Xadder a[31:0] b[31:0] alufn0 as_output[31:0] n v z as32

    * Instantiate a shifter, producing an output labeled shifter_output[31:0]
    * alufn[1:0] determines whether a logical left shift, a logical right shift, or an arithmetic right shift is performed
    * b[4:0] determines the number of bits by which the shifting will occur
    Xshifter a[31:0] b[4:0] alufn[1:0] shifter_output[31:0] shift32

    * Instantiate a bitwise boolean circuit, producing an output labeled bool_output[31:0]
    * alufn[3:0] determines whether a bitwise AND, a bitwise OR, bitwise XOR, or a bitwise NOT A is performed
    Xbool a[31:0] b[31:0] alufn[3:0] bool_output[31:0] bool32

    * Instantiate a comparator, producing an output labeled cmp_output[31:0]
    * alufn[2:1] determines whether an 'a = b', an 'a < b', or an 'a <= b' is performed
    Xcomparator n v z alufn[2:1] cmp_output[31:0] cmp32

    * Based on alufn[5:4], determine which output to select: the 32-bit adder/subtractor's, shifter's, bitwise boolean's, or comparator's
    Xselect alufn5#32 alufn4#32 as_output[31:0] shifter_output[31:0] bool_output[31:0] cmp_output[31:0] f[31:0] mux4
.ends

*******************************************************************************
* Defining counter subcircuit
*******************************************************************************
.subckt counter32 reset a[31:0] f[31:0] clk

  * Add the value of a[31:0] to f[31:0] through a 32-bit adder
  * Parameter a[31:0] signifies the value being added or subtracted (if negative)
  * Parameter f[31:0] is the current value being kept after going through the d-register
  Xadd a[31:0] f[31:0] 0 sum[31:0] cout[31:30] add32

  * Connect y[31:0] to 0 or ground
  .connect 0 y[31:0]

  * When reset = 0, the sum of the 32-bit adder also knwon as sum[31:0] will be the value of mux_output[31:0]
  * When reset = 1, y[31:0] or 0 will be the value of mux_output[31:0]
  * Parameter mux_output[31:0] will be passed to the d-register
  Xmux reset#32 sum[31:0] y[31:0] mux_output[31:0] mux2

  * In a positive edge-triggered register, mux_output[31:0] will be passed to f[31:0] only when clk is doing a rising transition
  Xdreg mux_output[31:0] clk#32 f[31:0] dreg
.ends

*******************************************************************************
* The $memory statement defines a memory device. Each memory device comes with
* one or more ports, each of which may be used for either reading or writing.
*
* Usage:
*   Xid  <port def>
*   +    <port def>
*   +    ...
*   + $memory width=<w> nlocations=<n> [file="<x.bin>" | contents=(<c c c>...)]
*
* <port def> is in the format "<oe> <clk> <wen> <addr[...]> <data[...]>"
*
* w     = the number of data lines (normally 32 in a 32-bit processor)
* n     = the number of memory locations (addresses) in this memory device
* x.bin = any .bin file that defines the initial contents of the memory
*         (must be in the same directory as JSim)
* c c c = defines the initial contents of the memory in an _inline_ manner
*         (i.e., not in an external file)
* oe    = "output enable", enables the memory device to output to the data
*         lines; this must be ON for read ports and OFF for write ports
* clk   = a clock input, needed for write ports; the data is written during a
*         rising edge
* wen   = "write enable", must be ON whenever we want to write to a write port
* addr  = a set of lines that contains the address to be accessed by the port
* data  = a set of lines that contains the data to be output (for read ports)
*         or the data to be written into memory (for write ports)
*
* The number of addr lines provided must be equal to ceiling(log2(nlocations)).
* The number of data lines provided must be equal to width.
*
* Note that if nlocations is not a power of 2, trying to address a non-existent
* memory location will result in an invalid read! Example: if nlocations=31
* instead of 32 and addr=0b11111 (31), the output of the device is undefined!
*******************************************************************************

*******************************************************************************
* Xmemory is a 512-byte main memory containing both user instructions and data.
*   1st line = read port for the next instruction to process (inst)
*   2nd line = read port for LD instructions (memrd)
*   3rd line = write port for ST instructions (memwd, controlled by wr signal)
*   5th line = the memory statement itself
* TODO: Copy your Beta program's BSim assembler output (.bin file) to your JSim
*       folder and change the file= parameter accordingly!
*******************************************************************************
Xmemory  vdd  0    0   pc[8:2]    inst[31:0]
+        vdd  0    0   mema[8:2]  memrd[31:0]
+        0    clk3  wr  mema[8:2]  memwd[31:0]
+ $memory width=32 nlocations=128 file="lab8check.bin"

*******************************************************************************
* Xregisters is a register memory device to store your Beta registers r0 - r31.
*   1st line = read port for rd1_
*   2nd line = read port for rd2_
*   3rd line = write port for wd (controlled by werf_ signal)
*   4th line = the memory statement itself
*   succeeding lines = initial values of the registers
*******************************************************************************
Xregisters  vdd  0    0      ra1_[4:0]  rd1_[31:0]
+           vdd  0    0      ra2_[4:0]  rd2_[31:0]
+           0    clk3  werf_  wa[4:0]    wd[31:0]
+ $memory width=32 nlocations=32 contents=(
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+ )

*******************************************************************************
* Temporarily connect werf_ directly to werf.
* TODO: You must replace this with circuitry so that if wa[4:0] = 0b11111 (31),
*       the werf_ signal is forced OFF; otherwise, it should pass through the
*       original werf signal.
*******************************************************************************
* If wa[3:0] = 1111, then werf1 = 0
* Otherwise, werf1 = 1
Xnand4 wa3 wa2 wa1 wa0 werf1 nand4

* The value of werf_ depends on the values of werf1 and wa4
* If werf1 = 0 and wa4 = 0, werf_ = werf
* If werf1 = 1 and wa4 = 0, werf_ = werf
* If werf1 = 0 and wa4 = 1, werf_ = 0
* If werf1 = 1 and wa4 = 1, werf_ = werf
* This circuitry forces werf_ to be 0 when wa[4:0] is 11111 or in other words, register31
* Otherwise, werf_ just takes in the value of werf
Xmux4 werf1 wa4 werf werf 0 werf werf_ mux4

*******************************************************************************
* Xcontrol is a read-only memory (ROM) that defines what to feed into the
* control signal lines of your final Beta circuit, depending on what opcode
* was read from your instruction memory (along with an additional signal "z"
* signifying the evaluation result of a BEQ or BNE instruction).
*   1st line = read port w/ 7 address lines (z + 6-bit opcode) + 14 data lines
*   2nd line = the memory statement itself
*   succeeding lines = the control signals (14 bits each) for all 64 opcodes
*                      times 2 (first half is for z = 0, second half for z = 1)
* TODO: Fill these lines with the proper control signals for each opcode!
*******************************************************************************
Xcontrol  vdd  0  0  z opcode[5:0]  control[13:0]
+ $memory width=14 nlocations=128 contents=(
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b00011000000001 0b00110000000010 0b11000000000000 0b10000000000001 0b11000000000000 0b00000000000001 0b01000000000001 0b11000000000000
+   0b00000100000001 0b00000100000101 0b11000000000000 0b11000000000000 0b00000111001101 0b00000111010101 0b00000111011101 0b11000000000000
+   0b00000101100001 0b00000101111001 0b00000101011001 0b11000000000000 0b00000110000001 0b00000110000101 0b00000110001101 0b11000000000000
+   0b00010100000001 0b00010100000101 0b11000000000000 0b11000000000000 0b00010111001101 0b00010111010101 0b00010111011101 0b11000000000000
+   0b00010101100001 0b00010101111001 0b00010101011001 0b11000000000000 0b00010110000001 0b00010110000101 0b00010110001101 0b11000000000000
+
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b00011000000001 0b00110000000010 0b11000000000000 0b10000000000001 0b11000000000000 0b01000000000001 0b00000000000001 0b11000000000000
+   0b00000100000001 0b00000100000101 0b11000000000000 0b11000000000000 0b00000111001101 0b00000111010101 0b00000111011101 0b11000000000000
+   0b00000101100001 0b00000101111001 0b00000101011001 0b11000000000000 0b00000110000001 0b00000110000101 0b00000110001101 0b11000000000000
+   0b00010100000001 0b00010100000101 0b11000000000000 0b11000000000000 0b00010111001101 0b00010111010101 0b00010111011101 0b11000000000000
+   0b00010101100001 0b00010101111001 0b00010101011001 0b11000000000000 0b00010110000001 0b00010110000101 0b00010110001101 0b11000000000000
+ )

*******************************************************************************
* Helper subckt to facilitate multi-bit joins.
*******************************************************************************
.subckt join S T
  .connect S T
.ends

*******************************************************************************
* The following .connect statements define what control signal goes to which
* of the 14 bits of the control ROM's output. The bits are ordered as they
* appear in the control logic diagram of your 50.01 slides.
*******************************************************************************
Xjcontrola control[13:12] pcsel[1:0] join
Xjcontrolb control11      ra2sel     join
Xjcontrolc control10      bsel       join
Xjcontrold control[9:8]   wdsel[1:0] join
Xjcontrole control[7:2]   alufn[5:0] join

* The join for wr and werf is commented out as the code below handles it with the reset logic
* Xjcontrolf control1       wr         join
* Xjcontrolg control0       werf       join

*******************************************************************************
* Also connect our instruction signal lines to our opcode, rc, ra, rb, and c.
*******************************************************************************
Xjinsta inst[31:26] opcode[5:0] join
Xjinstb inst[25:21] rc[4:0]     join
Xjinstc inst[20:16] ra[4:0]     join
Xjinstd inst[15:11] rb[4:0]     join
Xjinste inst[15:0]  c[15:0]     join

*******************************************************************************
* MUX for PCSEL
*******************************************************************************
* If PCSEL = 00, pass <PC> + 4 to pcselout
* If PCSEL = 10, pass Jump Target address to pcselout
* If PCSEL = 01, pass Branch Target address to pcselout
* If PCSEL = 11, pass <PC> to pcselout
Xpcselmux pcsel1#32 pcsel0#32 pcplusfour[31:0] jumptarget[31:0] branchtarget[31:0] pc[31:0] pcselout[31:0] mux4

*******************************************************************************
* Reset Logic and Program Counter
*******************************************************************************
* At rising transition, the output of the PCSEL mux gets passed to pcnext
Xprogramcounter pcselout[31:0] clk3#32 pcnext[31:0] dreg

* If reset = 0, program counter takes in the value of pcnext, changing the address
* If reset = 1, program counter takes in 0 which is the starting address
Xresetpc reset#32 pcnext[31:0] 0#32 pc[31:0] mux2

* If reset = 0, wr is set to control1
* If reset = 1, wr is set to 0
Xresetwr reset control1 0 wr mux2

* If reset = 0, werf is set to control0
* If reset = 1, werf is set to 0
Xresetwerf reset control0 0 werf mux2

* Reset Waveform - starts as 1 to reset, then changes to 0
Wreset reset nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns)
+ 1 0

*******************************************************************************
* Branch Target
*******************************************************************************
* Shift C<15:0> by 2
* This is essentially C<15:0> << 2
Xbranchtarget1 c15#14 c[15:0] 0#2 shifttwo[31:0] join

* Add 4 to <PC>
* This is essentially <PC> + 4
Xbranchtarget2 0#23 pc[8:0] 0#29 vdd 0#3 pcplusfour[31:0] c_out[1:0] add32

* Add C<15:0> << 2 and <PC> + 4
* This is essentially <PC> + 4 + 4C
Xbranchtarget3 pcplusfour[31:0] shifttwo[31:0] 0 branchtarget[31:0] c_out[3:2] add32


*******************************************************************************
* Instruction Memory to Register File
*******************************************************************************
* Connect ra to ra1_
Xconnect_ra_ra1_ ra[4:0] ra1_[4:0] join

* If RA2SEL = 0, ra2_ reads from rb
* If RA2SEL = 1, ra2_ reads from rc
Xra2selmux ra2sel#5 rb[4:0] rc[4:0] ra2_[4:0] mux2

* Connect rc to wa
Xconnect_rc_wa rc[4:0] wa[4:0] join

*******************************************************************************
* Register File to Data Memory
*******************************************************************************
* Connect rd2_ to wd of Data Memory
Xconnect_rd2_memwd rd2_[31:0] memwd[31:0] join

*******************************************************************************
* Register File to NOR gate for Z
*******************************************************************************
* Apply NOR4 to all bits of rd1_
Xnorz1 rd1_[31:24] rd1_[23:16] rd1_[15:8] rd1_[7:0] tempz[7:0] nor4

* The output of the first stage NOR4 is set as input for NAND4
Xnorz2 tempz7 tempz6 tempz5 tempz4 tempznext1 nand4
Xnorz3 tempz3 tempz2 tempz1 tempz0 tempznext0 nand4

* Apply NOR2
* If rd1_ is nonzero, z = 0
* If rd1_ is zero, z = 1
Xnorz4 tempznext[1:0] z nor2

*******************************************************************************
* Register File to Jump Target
*******************************************************************************
* Connect rd1_ to Jump Target
Xjumptarget rd1_[31:0] jumptarget[31:0] join

*******************************************************************************
* Register File to ALU
*******************************************************************************
* If BSEL = 0, then rd2_ gets passed to b of ALU
* If BSEL = 1, then c (sign-extended) gets passed to b of ALU
Xbselmux bsel#32 rd2_[31:0] c15#16 c[15:0] b[31:0] mux2

* Perform ALU function on inputs a and b
Xalu rd1_[31:0] b[31:0] alufn[5:0] aluout[31:0] alu32

*******************************************************************************
* ALU to Data Memory
*******************************************************************************
* Connect output of ALU to mema of Data Memory
Xconnect_aluout_mema aluout[8:2] mema[8:2] join

* Make the 2 Least Significant Bits 0 so that address is divisible by 4
.connect 0 mema[1:0]

*******************************************************************************
* ALU to Register File
*******************************************************************************
* If WDSEL = 0, then <PC> + 4 gets passed to wd of Register File
* If WDSEL = 1, then ALU output gets passed to wd of Register File
* If WDSEL = 2, then data from memory gets passed to wd of Register File
Xwdselmux wdsel1#32 wdsel0#32 pcplusfour[31:0] memrd[31:0] aluout[31:0] 0#32 wd[31:0] mux4 

*******************************************************************************
* Plot some signals together (or else we won't have enough space in the plot
* window)
*******************************************************************************
Xjdisplaya ra2_b_wdsel[3:0] ra2sel bsel wdsel[1:0] join
Xjdisplayb wr_werfs[2:0]    wr werf werf_          join

*******************************************************************************
* This section plots the following signals in order:
* - pc (program counter)
* - beta operation mnemonic (taken from the 6-bit opcode header)
* - ra, rb, rc (taken from the rest of the instruction opcode)
* - c (taken from the last 16 bits of the instruction opcode)
* - control signals (i.e., output of the control logic)
* - rd1_ (result of reading address ra1_)
* - rd2_ (result of reading address ra2_)
* - wd (value being written to address wa -- but only if wr is 1)
* - mema (address to access in main memory)
* - memrd (result of reading address mema)
* - memwd (value being written to address mema -- but only if werf is 1)
*******************************************************************************
.tran 3000ns
.plot pc[8:0]
.plot betaop(opcode[5:0])
.plot d(ra[4:0])
.plot d(rb[4:0])
.plot d(rc[4:0])
.plot sd(c[15:0])
.plot b(pcsel[1:0])
.plot b(ra2_b_wdsel[3:0])
.plot b(alufn[5:0])
.plot b(wr_werfs[2:0])
.plot sd(rd1_[31:0])
.plot sd(rd2_[31:0])
.plot sd(wd[31:0])
.plot d(mema[8:0])
.plot sd(memrd[31:0])
.plot sd(memwd[31:0])
